<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>PLDI 2018 Artifact Evaluation of Pinpoint | WikWiki</title>
<link rel="stylesheet" href="style.css">
</head>
<body>
  <div id="container">
    <div id="main">
    
    <h1>PLDI 2018 Artifact Evaluation of Pinpoint</h1>
    <div id="content">
<h2 id="toc-prelimilaries">Prelimilaries</h2>

<p>Pinpoint is built on LLVM 3.6. It analyzes the bitcode files (.bc files) of
software projects to check vulnerabilities. A bitcode file is a kind of
intermediate representation of the source code. We have prepared these bitcode
for evaluation.</p>

<h2 id="toc-evaluation-host">Evaluation Host</h2>

<p>Because pinpoint needs to be run on a server with large memory space, we
prepared a ubuntu server for the artifact evaluation. Reviewer can access the
server via ssh (the password is given at <a
href="https://pldi18ae.hotcrp.com">the submission site</a>):</p>

<ul>
	<li>ssh PLDI2018AE@143­.89.191.101</li>
</ul>

<p><strong>NOTE: when running large benchmark programs (&gt;0.5MLoC), the
computation resource in the server may be used up if multiple users use the
server at the same time. Thus, we recommend to run small benchmark programs to
verify our idea.</strong></p>

<p>In the server, we have installed all necessary binaries for evaluation:</p>

<ul>
	<li><strong>pp-check</strong>: the binary of pinpoint</li>

	<li><strong>saber</strong>: the binary of saber, which implements one of our
	baseline approach</li>

	<li><strong>pp-capture</strong>: our wrapper of clang static analyzer</li>

	<li><strong>infer</strong>: the facebook infer analyzer</li>
</ul>

<p>In the home directory, there are several folders, including three groups of
benchmarks and other folders:</p>

<ul>
	<li><strong>CINT2000SRC</strong>: the spec cint2000 program sources
	(12 in total)</li>

	<li><strong>CINT2000BC</strong>: the llvm bitcode of the cint2000 program
	sources (12 in total)</li>

	<li><strong>OpenSourcePro­jectSrc</strong>: open source projects for evaluation
	(18 in total)</li>

	<li><strong>OpenSourcePro­jectBC</strong>: the llvm bitcode of the opensource
	program sources (18 in total)</li>

	<li><strong>juliet</strong>: the benchmark for evaluating the recall of our
	approach.</li>

	<li><strong>juliet-bc</strong>: the llvm bitcode files of juliet
	test suite.</li>

	<li>pinpoint: where pinpoint is installed</li>

	<li>infer-linux64-v0.12.1: where facebook infer is installed</li>

	<li>benchmarks: a soft link of OpenSourcePro­jectSrc</li>

	<li>boost59: the boost library used for compiling mysql-server, one of our
	benchmark programs.</li>
</ul>

<h2 id="toc-artifact-evaluation">Artifact Evaluation</h2>

<p>The following artifact evaluation process follows the evaluation order in our
paper (Section 5).</p>

<h2 id="toc-5-1-comparison-with-svfa-techniques">5.1 Comparison with SVFA
Techniques</h2>

<h3 id="toc-5-1-1-scalability-and-5-1-2-1-precision">5.1.1 Scalability and
5.1.2 (1) Precision</h3>

<p>We will use two benchmark programs (<strong>webassembly</strong> 23KLoC and
<strong>mysql-server</strong> 2MLoC), one small and one big, to demonstrate our
evaluation results. For other benchmark programs, the evaluation process is
the same.</p>

<p>Run the following commands to run pinpoint:</p>
* mkdir $HOME/test #create a testing folder. reviewers are expected to use
different folder names to avoid conflicts<br />
* cd $HOME/test # enter the testing folder<br />
* pp-check -ps-uaf -nworkers=15 -report=web.TXT
$HOME/OpenSourceProjectBC/webassembly.bc<br />
* pp-check -ps-uaf -nworkers=15 -report=mysql.TXT
$HOME/OpenSourceProjectBC/mysqld.bc
<p>It takes several minutes for webassembly to finish and about 1.5 hours for
mysqld. After it finishes, you will see the time and memory usage on the screen
(see the figure as below (mysqld)). For webassembly, it reports
1 use-after-free, which is a real bug that has been confirmed. For mysqld, it
reports 5, in which 4 are real bugs. The bug reports are in ./web.TXT and
./mysql.TXT, respectively. You can refer to <a
href="/pldi2018ae-wiki/bugreport.pdf">this</a> to understand the format of bug
report files.</p>

<div class="figure"><img src="/pldi2018ae-wiki/images/mysqld-screen.png" alt=""
/></div>

<p><strong>Caveats.</strong></p>

<ul>
	<li>pp-check will report three use-after-free bugs for goaccess. The three are
	due to the same root cause. Thus, we regard them as a single bug.</li>

	<li>pp-check will report two use-after-free bugs for transmission. The two are
	due to the same root cause. Thus, we regard them as a single bug.</li>

	<li>pp-check will report three use-after-free bugs for firefox, in which one is
	real bug and the other two are false positives which are regarded as a single
	false warning because they are caused by the same root reason.</li>

	<li>When running pp-check on shadowsocks, an extra option (-report-pass-line=60)
	should be added.</li>
</ul>

<hr />

<p>We compare with SVF, the most recent SVFA technique.</p>

<p>Next, we run SVF and compare the results. In the commands, saber is the
binary of the SVF technique. It has been installed in the system. The source
code is at <a href="https://github.com/whichbug/SVF-UAF">github</a>. Because
saber is not time- and memory- efficient, it may run a long time. We set a
timeout for saber, which is 12 hours. This means that saber will stop after at
most 12 hours. After it stops, time and memory usage will be printed on the
screen.</p>
* saber -uaf -no-global -stat=false $HOME/OpenSourceProjectBC/webassembly.bc<br
/>
* saber -uaf -no-global -stat=false $HOME/OpenSourceProjectBC/mysqld.bc
<p>For webassembly, it takes about 2min and 2G memory to finish building FSVFG,
which is similar to building SEG (our approach). After the FSVFG is built, it
will check the use-after-free vulnerabilities based on the FSVFG. After a long
time checking (1 hour or more), it reports hundreds false warnings, which are
printed on the screen. A screenshot is illustrated as below.</p>

<div class="figure"><img src="/pldi2018ae-wiki/svf.png" alt="" /></div>

<p>For mysqld, it will takes more than 12 hours to finish building FSVFG
(timeouts). Because it timeouts, it does not have any chance to check
use-after-free based on the FSVFG. In contrast, pinpoint takes only 20 min to
finish building SEG and finishes the whole process in about 1.5 hours.</p>

<hr />

<p>The above results should be consistent with Figures 7/8/9 and Table 1 in
our paper.</p>

<h3 id="toc-5-1-2-2-recall">5.1.2 (2) Recall</h3>

<p>We use juliet test suite for evaluating recall of pinpoint. There are three
parts, of which the source codes are in the following folders:</p>

<ul>
	<li>$HOME/juliet/tes­tcases/CWE415_D­ouble_Free/s01/</li>

	<li>$HOME/juliet/tes­tcases/CWE415_D­ouble_Free/s02/</li>

	<li>$HOME/juliet/tes­tcases/CWE416_U­se_After_Free/</li>
</ul>
The files under each source folder, e.g.,
$HOME/juliet/tes­tcases/CWE415_D­ouble_Free/s01/ are like <u></u>
<pre>CWE415_Double_Fre­e__new_delete_a­rray_struct01­.cpp</pre>
 The prefix CWE415_Double_Fre­e__ is the vulnerability type. The mid part
new_delete_arra­y_struct_ represents the functions and data types that cause
the bug. The suffix is the No. of the vulnerability. In most cases, one file
contains one vulnerability. Some vulnerabilities consist of several files. For
example, No. 74 vulnerability consists of two files: <u></u>
<pre>CWE415_Double_Fre­e__new_delete_a­rray_struct_74a­.cpp</pre>
 <u></u>
<pre>CWE415_Double_Fre­e__new_delete_a­rray_struct_74b­.cpp</pre>

<p>The llvm bitcode of these benchmark programs are</p>

<ul>
	<li>$HOME/juliet-bc/CWE415_s01.bc</li>

	<li>$HOME/juliet-bc/CWE415_s02.bc</li>

	<li>$HOME/juliet-bc/CWE416.bc</li>
</ul>

<p>Use CWE415_s01.bc as an example. Run the following commands for
evaluation:</p>
* mkdir $HOME/test #create a testing folder. reviewers are expected to use
different folder names to avoid conflicts<br />
* cd $HOME/test # enter the testing folder<br />
* pp-check -ps-uaf -nworkers=15 -report=CWE415_s01.bugs.TXT
$HOME/juliet-bc/CWE415_s01.bc # run pinpoint's use-after-free checker
<p>It will take several minutes. After it finishes, you will see the time and
memory usage on the screen. The bug reports are in ./CWE415_s01.bug­s.TXT,
which contain all vulnerabilities in the test suite. Remove the testing folder
to keep the home directory clean.</p>

<h2 id="toc-5-2-detected-real-vulnerabilities">5.2 Detected Real
Vulnerabilities</h2>

<p>This section does not contain any experiments.</p>

<h2 id="toc-5-3-study-of-the-taint-issue-checkers">5.3 Study of the Taint-Issue
Checkers</h2>

<p>Run the following commands and the results will contain both path-traversal
vulnerabilities and data transmission vulnerabilities.</p>
* mkdir $HOME/test #create a testing folder. reviewers are expected to use
different folder names to avoid conflicts<br />
* cd $HOME/test # enter the testing folder<br />
* pp-check -ps-taint -nworkers=15 -report=mysqld.taint.bugs.TXT
$HOME/OpenSourceProjectBC/mysqld.bc # run pinpoint's taint-issue checker
<p>It will take about half an hour. After it finishes, you will see the time and
memory usage on the screen. The bug reports are in ./mysqld.tain­t.bugs.TXT.
Remove the testing folder to keep the home directory clean.</p>

<h2 id="toc-5-4-comparison-with-other-static-bug-detectors">5.4 Comparison with
Other Static Bug Detectors</h2>

<p>Here, we still use mysql-server (the 2MLoC project) as an example to run
clang static analyzer (CSA) and infer.</p>

<p>Run the following commands to run clang static analyzer. Because the building
system is complex for some projects, we prepare a build-csa folder in the source
folder for some projects so that we can run CSA directly</p>
* cd $HOME/OpenSourceProjectSrc/mysql-sever # enter the source folder<br />
* cd build-csa # enter csa folder<br />
* make clean &amp;&amp; rm -rf .piggy/<br />
* pp-capture --capture-only --run-csa -- make -j15
<p>It will takes about 30 min to finish. It will report 26 use-after-free
bugs, in which 24 are false positives. The bug reports are in the folder
.piggy/reports/</p>

<p>For projects that do not have the build-csa folder, run the following command
directly after entering the source directory</p>
* make clean &amp;&amp; rm -rf .piggy/<br />
* pp-capture --capture-only --run-csa -- make -j15
<p>Note that CSA cannot be run on the following projects:</p>

<ul>
	<li>shadowsocks</li>
</ul>

<hr />

<p>Run the following commands to run facebook infer. Because the building system
is complex for some projects and infer is not friendly to use (e.g., <a
href="https://github.com/facebook/infer/issues/25">cmake related bugs</a>), we
prepare a build-infer folder in the source folder for some projects so that we
can run infer directly</p>
* cd $HOME/OpenSourceProjectSrc/mysql-sever # enter the source folder<br />
* cd build-infer # enter infer folder<br />
* make clean &amp;&amp; rm -rf infer-out<br />
* infer run -- make -j15
<p>It will takes about 30 min to finish. It will report 13 use-after-free
bugs, all of which are false positives. You can run the following command to
inspect the bug reports.</p>
* inferTraceBugs
<p>For projects that do not have the build-infer folder, run the following
command directly after entering the source directory</p>
* make clean &amp;&amp; rm -rf infer-out<br />
* infer run -- make -j15
<p>Note that infer cannot be run on the following projects:</p>

<ul>
	<li>html5-parser</li>

	<li>shadowsocks</li>

	<li>swoole</li>

	<li>vim</li>

	<li>wrk</li>

	<li>php</li>

	<li>firefox</li>
</ul>

<!-- by Texy2! -->      </div>
    </div>
    <div id="sidebar">
    <p id="title"><a href="./">WikWiki</a></p>

<ul class="sidebar-list">
  <li class="edit-link"><a href="./?edit=PLDI_2018_Artifact_Evaluation_of_Pinpoint">Edit page</a></li>
  <li class="backlinks"><a href="./?backlinks=PLDI_2018_Artifact_Evaluation_of_Pinpoint">Backlinks</a></li>
  <li class="modified">Last modified: <em>05.07.2018, 17:04:39</em></li>
  <li class="create-new-link"><a href="./?edit=">Create new page</a></li>
  <li class="recent-changes-link"><a href="./?recent=10">Recent changes</a></li>
</ul>

<div id="toc">
	<h3>Contents</h3>

	<ul>
		<li><a href="#toc-prelimilaries">Prelimilaries</a></li>

		<li><a href="#toc-evaluation-host">Evaluation Host</a></li>

		<li><a href="#toc-artifact-evaluation">Artifact Evaluation</a></li>

		<li><a href="#toc-5-1-comparison-with-svfa-techniques">5.1 Comparison with SVFA
		Techniques</a>
			<ul>
				<li><a href="#toc-5-1-1-scalability-and-5-1-2-1-precision">5.1.1 Scalability
				and 5.1.2 (1) Precision</a></li>

				<li><a href="#toc-5-1-2-2-recall">5.1.2 (2) Recall</a></li>
			</ul>
		</li>

		<li><a href="#toc-5-2-detected-real-vulnerabilities">5.2 Detected Real
		Vulnerabilities</a></li>

		<li><a href="#toc-5-3-study-of-the-taint-issue-checkers">5.3 Study of the
		Taint-Issue Checkers</a></li>

		<li><a
		href="#toc-5-4-comparison-with-other-static-bug-detectors">5.4 Comparison with
		Other Static Bug Detectors</a></li>
	</ul>
</div>

    </div>
    <div id="footer">
    Powered by <a href="https://github.com/smasty/WikWiki">WikWiki</a>.
    </div>
  </div>
</body>
</html>